/*
 * Copyright 2010 - 2015 Monits
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.monits.volleyrequests.restsupport;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.android.volley.Request;
import com.google.gson.Gson;
import com.monits.volleyrequests.network.request.GsonRequest;

/**
 * Entry point for defining and handling REST resources and generating requests easily.
 */
public final class Rest {
	/*package*/ static RequestInterceptor interceptor;
	private static String baseUrl;
	private static Gson gson;
	private static String elementsKey;

	/**
	 * An interceptor that can alter a request generated by the REST infrastructure.
	 */
	public interface RequestInterceptor {
		/**
		 * Intercept a generated request and return the modified one / new one.
		 *
		 * @param request The original request created by the infrastructure.
		 * @param <T> The type of the element returned by the request.
		 * @return The request to be actually used after interception.
		 */
		@NonNull
		<T> Request<T> intercept(@NonNull GsonRequest<T> request);
	}

	private Rest() {
		throw new AssertionError("Can't instantiate this class");
	}

	/**
	 * Set the base url where the REST API to be consumed resides.
	 *
	 * This url will automatically be used for all requests generated except specifically
	 * stated otherwise.
	 *
	 * @param baseUrl The base url where the REST API resides.
	 */
	public static void setBaseUrl(@NonNull final String baseUrl) {
		// Strip final slash
		if (baseUrl.endsWith("/")) {
			Rest.baseUrl = baseUrl.substring(0, baseUrl.length() - 1);
		} else {
			Rest.baseUrl = baseUrl;
		}
	}

	/**
	 * Set the Gson instance to be used to encode and decode all POJOs into JSON,
	 *
	 * This gson instance will automatically be used for all requests generated except specifically
	 * stated otherwise.
	 *
	 * @param gson The gson instance to be used.
	 */
	public static void setGson(@NonNull final Gson gson) {
		Rest.gson = gson;
	}

	/**
	 * Sets a  interceptor that can modify all requests generated by the REST infrastructure.
	 *
	 * @param interceptor The interceptor to be used.
	 */
	public static void setInterceptor(@Nullable final RequestInterceptor interceptor) {
		Rest.interceptor = interceptor;
	}

	/**
	 * Sets the key for the JSON that retrieves all items of a collection.
	 *
	 * @param elementsKey
	 *            the key used in the JSON response. If null, it is assumed that
	 *            the JSON array comes alone without being wrapped by an object.
	 */
	public static void setElementsKey(@Nullable final String elementsKey) {
		Rest.elementsKey = elementsKey;
	}

	/* package */ static String getElementsKey() {
		return Rest.elementsKey;
	}

	/**
	 * Moves down the REST API tree down to a specific top level element.
	 *
	 * @param route The top level collection to which the element belongs.
	 * @param id The id of the selected element.
	 * @return An element pointing to the requested element in the RESt API, ready for further
	 * 			transversal
	 */
	@NonNull
	public static UrlBuilder.ElementUrlBuilder one(@NonNull final String route, final int id) {
		return one(route, Integer.toString(id));
	}

	/**
	 * Moves down the REST API tree down to a specific top level element.
	 *
	 * @param route The top level collection to which the element belongs.
	 * @param id The id of the selected element.
	 * @return An element pointing to the requested element in the RESt API, ready for further
	 * 			transversal
	 */
	@NonNull
	public static UrlBuilder.ElementUrlBuilder one(@NonNull final String route, @NonNull final String id) {
		return one(route, id, gson);
	}

	/**
	 * Moves down the REST API tree down to a specific top level element.
	 *
	 * @param route The top level element to retrieve.
	 * @return An element pointing to the requested element in the REST API, ready for further
	 * 			transversal
	 */
	@NonNull
	public static UrlBuilder.ElementUrlBuilder one(@NonNull final String route) {
		return oneUrl(route, baseUrl);
	}

	/**
	 * Moves down the REST API tree down to a specific top level element.
	 *
	 * @param route The top level collection to which the element belongs.
	 * @param id The id of the selected element.
	 * @param gson The gson instance to be used instead f the default one.
	 * @return An element pointing to the requested element in the REST API, ready for further
	 * 			transversal
	 */
	@NonNull
	public static UrlBuilder.ElementUrlBuilder one(@NonNull final String route, @NonNull final String id,
			@NonNull final Gson gson) {
		return oneUrl(formatUrl(route, id), baseUrl, gson);
	}

	/**
	 * Moves down the REST API tree down to a specific top level element.
	 *
	 * @param route The route to the requested element.
	 * @param url The base url to be used instead of the default one.
	 * @return An element pointing to the requested element in the REST API, ready for further
	 * 			transversal.
	 */
	@NonNull
	public static UrlBuilder.ElementUrlBuilder oneUrl(@NonNull final String route,
			@NonNull final String url) {
		return oneUrl(route, url, gson);
	}

	/**
	 * Moves down the REST API tree down to a specific top level element.
	 *
	 * @param route The route to the requested element.
	 * @param url The base url to be used instead of the default one.
	 * @param gson The gson instance to be used instead f the default one.
	 * @return An element pointing to the requested element in the REST API, ready for further
	 * 			transversal
	 */
	@NonNull
	public static UrlBuilder.ElementUrlBuilder oneUrl(@NonNull final String route,
			@NonNull final String url, @NonNull final Gson gson) {
		return new RestElement<>(formatUrl(url, route), gson, Void.class);
	}

	/**
	 * Moves down the REST API tree down to a specific top level collection.
	 *
	 * @param route The top level collection to retrieve.
	 * @return An element pointing to the requested collection in the REST API, ready for further
	 * 			transversal
	 */
	@NonNull
	public static UrlBuilder.CollectionUrlBuilder all(@NonNull final String route) {
		return all(route, gson);
	}

	/**
	 * Moves down the REST API tree down to a specific top level collection.
	 *
	 * @param route The top level collection to retrieve.
	 * @param gson The gson instance to be used instead f the default one.
	 * @return An element pointing to the requested collection in the REST API, ready for further
	 * 			transversal
	 */
	@NonNull
	public static UrlBuilder.CollectionUrlBuilder all(@NonNull final String route,
			@NonNull final Gson gson) {
		return allUrl(route, baseUrl, gson);
	}

	/**
	 * Moves down the REST API tree down to a specific top level collection.
	 *
	 * @param route The top level collection to retrieve.
	 * @param url The base url to be used instead f the default one.
	 * @return An element pointing to the requested collection in the REST API, ready for further
	 * 			transversal
	 */
	@NonNull
	public static UrlBuilder.CollectionUrlBuilder allUrl(@NonNull final String route,
			@NonNull final String url) {
		return allUrl(route, url, gson);
	}

	/**
	 * Moves down the REST API tree down to a specific top level collection.
	 *
	 * @param route The top level collection to retrieve.
	 * @param url The base url to be used instead f the default one.
	 * @param gson The gson instance to be used instead f the default one.
	 * @return An element pointing to the requested collection in the REST API, ready for further
	 * 			transversal
	 */
	@NonNull
	public static UrlBuilder.CollectionUrlBuilder allUrl(@NonNull final String route,
			@NonNull final String url, @NonNull final Gson gson) {
		return new RestCollection<>(formatUrl(url, route), gson, Void.class);
	}

	/**
	 * Appends a series of segments to the given base url.
	 *
	 * @param baseUrl The base url to which to append segments.
	 * @param segments The segments to be appended, separated with '/'.
	 * @return The formatted url.
	 */
	@NonNull
	/*package*/ static String formatUrl(@NonNull final String baseUrl, @NonNull final String... segments) {
		int expectedLength = baseUrl.length() + segments.length;
		for (final String s : segments) {
			expectedLength += s.length();
		}

		// Create a string builder with a good guesstimate of the new string's length
		final StringBuilder sb = new StringBuilder(expectedLength).append(baseUrl);

		for (final String segment : segments) {
			sb.append('/').append(segment);
		}

		return sb.toString();
	}
}
